#!/usr/bin/env perl
#
# Copyright (C) 2020  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of list-zfs-snapshots
#
# list-zfs-snapshots is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# list-zfs-snapshots is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with list-zfs-snapshots.  If not, see <http://www.gnu.org/licenses/>.
#
use strict;
use warnings;

use feature 'signatures';
no warnings 'experimental::signatures';
## no critic (ProhibitSubroutinePrototypes)

use Number::Bytes::Human qw(format_bytes);

use constant TRUE  => !! 1;
use constant FALSE => !! '';

use constant RELATIONS => { # <=> results
    'BEFORE' => -1,
    'AFTER'  =>  1,
};

my $ZFS = $ENV{ZFS_BINARY} // '/sbin/zfs';

sub percent_string($val, $max_val, $max_len) {
    return '' unless $max_val;
    return '#' x ($val * $max_len / $max_val);
}

sub read_volumes() {
    my @volumes = ();
    
    open my $fh, '-|', "$ZFS list -o name,usedsnap -H -p" or die "can't call $ZFS: $!\n";
    while (my $line = <$fh>) {
	chomp $line;
	my ($name, $size) = split /\s+/, $line, 2;
	next unless defined $size;
	
	my $pool = $name;
	$pool =~ s|/.*$||;

	next if $pool eq $name;

	push @volumes, {
	    NAME => $name,
	    POOL => $pool,
	    SIZE => $size,
	};
    }
    close $fh or die "can't close $ZFS: $!\n";
    
    return @volumes;
}

sub read_snapshots($volume) {
    my @snapshots = ();
    
    open my $fh, '-|', "$ZFS list -o name,used,creation -t snapshot -H -p $volume" or die "can't call $ZFS: $!\n";
    while (my $line = <$fh>) {
	chomp $line;
	my ($name, $size, $date) = split /\s+/, $line, 3;
	next unless defined $date;
	
	push @snapshots, {
	    NAME => $name,
	    SIZE => $size,
	    DATE => $date,
	};
    }
    close $fh or die "can't close $ZFS: $!\n";
    
    return @snapshots;
}

sub is_contained($field, $value, @list) {
    foreach my $element (@list) {
	if ($element->{$field} eq $value) {
	    return TRUE;
	}
    }
    return FALSE;
}

sub looks_like_snapshot($possible_snapshot) {
    return $possible_snapshot =~ m|^[-_:./a-zA-Z0-9]+@[-_:.a-zA-Z0-9]+$|;
}

sub get_volume_from_snapshot($snapshot) {
    return (split '@', $snapshot)[0];
}

sub filter_by_pool($pool, @elements) {
    return grep { $_->{POOL} eq $pool } @elements;
}

sub filter_by_name($name, @elements) {
    return grep { $_->{NAME} eq $name } @elements;
}

sub filter_by_date($date, $comparator, @elements) {
    return grep { ($_->{DATE} <=> $date) == $comparator } @elements;
}

sub sort_by_size(@elements) {
    my @sorted = sort { $a->{SIZE} <=> $b->{SIZE} } @elements;
    return @sorted;
}

sub sort_by_date(@elements) {
    my @sorted = sort { $b->{DATE} <=> $a->{DATE} } @elements;
    return @sorted;
}

sub sum_size(@elements) {
    my $total_size = 0;
    $total_size += $_->{SIZE} foreach @elements;
    return $total_size;
}

sub get_percentage($part, $total) {
    return '  - ' unless $total;
    return sprintf "%3.0f%%", $part * 100 / $total;
}

sub show_volumes(@volumes) {
    @volumes = sort_by_size @volumes;
    my $total_size = sum_size @volumes;
    my $max_size = $volumes[-1]->{SIZE};

    foreach my $volume (@volumes) {
	my $name = $volume->{NAME};
	my $size = $volume->{SIZE};
	my $histogram = percent_string($size, $max_size, 16);
	my $size_percent = get_percentage($size, $total_size);
	my $size_readable = format_bytes( $size );
	printf "%16s  %s  %4s  %s\n", $histogram, $size_percent, $size_readable, $name;
    }
}

sub show_snapshots($volume) {
    my @snapshots = read_snapshots $volume;
    return unless @snapshots;
    @snapshots = sort_by_date @snapshots;
    my $total_size = sum_size @snapshots;
    my $max_size = (sort_by_size @snapshots)[-1]->{SIZE};
    
    foreach my $snapshot (@snapshots) {
	my $name = $snapshot->{NAME};
	my $size = $snapshot->{SIZE};
	my $date = $snapshot->{DATE};
	my $histogram = percent_string($size, $max_size, 16);
	my $size_percent = get_percentage($size, $total_size);
	my $size_readable = format_bytes( $size );
	printf "%16s  %s  %4s  %s\n", $histogram, $size_percent, $size_readable, $name;
    }
}

sub list_snapshots_relative($volume, $snapshot, $comparator) {
    my @snapshots = read_snapshots $volume;
    my ($the_snapshot) = filter_by_name $snapshot, @snapshots;
    die "unknown snapshot <$snapshot>\n" unless $the_snapshot;
    my $the_date = $the_snapshot->{DATE};

    print "$_->{NAME}\n" foreach sort_by_date filter_by_date $the_date, $comparator, @snapshots;
}

sub get_next_argument() {
    return shift @ARGV // '';
}

sub show_help() {
    print <<EOF
usage:
  list-zfs-snapshots                    -  list total snapshot usage of all volumes
  list-zfs-snapshots <pool>             -  list total snapshot usage of all volumes in <pool>
  list-zfs-snapshots <volume>           -  list detailled snapshot usage in <volume>
  list-zfs-snapshots <snapshot> after   -  list names of newer snapshots from same volume
  list-zfs-snapshots <snapshot> before  -  list names of older snapshots from same volume
  list-zfs-snapshots -h | --help        -  show this help
EOF
    ;
}

my $command = get_next_argument;
if ($command eq '-h' or $command eq '--help') {
    show_help;
    exit 0;
}

my @volumes = read_volumes;
if ($command eq '') {
    show_volumes @volumes;
    exit 0;
}
if (is_contained 'POOL', $command, @volumes) {
    my $pool = $command;
    @volumes = filter_by_pool $pool, @volumes;
    show_volumes @volumes;
    exit 0;
}
if (is_contained 'NAME', $command, @volumes) {
    my $volume = $command;
    show_snapshots $volume;
    exit 0;
}
if (looks_like_snapshot $command) {
    my $snapshot = $command;
    my $relation_arg = get_next_argument;
    die "missing second argument after snapshot name\n" unless $relation_arg;
    my $volume = get_volume_from_snapshot $snapshot;
    die "unknown volume in snapshot name <$snapshot>\n" unless filter_by_name $volume, @volumes;
    my $relation = RELATIONS->{uc $relation_arg};
    die "invalid second argument <$relation_arg>, valid arguments are <after> and <before>\n" unless defined $relation;
    list_snapshots_relative $volume, $snapshot, $relation;
    exit 0;
}
die "<$command> is neither a known pool, volume, nor snapshot name\n";
